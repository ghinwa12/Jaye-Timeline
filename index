<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Jaye Life Timeline</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        :root {
            --primary: #2c3e50;
            --secondary: #3498db;
            --light: #ecf0f1;
            --accent: #e74c3c;
            --success: #2ecc71;
            --warning: #f39c12;
            --dark-text: #2c3e50;
            --light-text: #7f8c8d;
            --shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }
        
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        
        body {
            background-color: #f5f7fa;
            color: var(--dark-text);
            line-height: 1.6;
            padding: 20px;
            max-width: 1400px;
            margin: 0 auto;
        }
        
        header {
            text-align: center;
            margin-bottom: 30px;
            padding: 25px;
            background: linear-gradient(135deg, var(--primary) 0%, #1a2530 100%);
            color: white;
            border-radius: 10px;
            box-shadow: var(--shadow);
            position: relative;
        }
        
        h1 {
            font-size: 2.8rem;
            margin-bottom: 10px;
            font-weight: 700;
        }
        
        .header-subtitle {
            font-size: 1.2rem;
            opacity: 0.9;
        }
        
        .dashboard {
            display: grid;
            grid-template-columns: 1fr 1fr 1fr 1fr;
            gap: 20px;
            margin-bottom: 30px;
        }
        
        .summary-card {
            background: white;
            padding: 20px;
            border-radius: 10px;
            box-shadow: var(--shadow);
            text-align: center;
        }
        
        .summary-number {
            font-size: 2.5rem;
            font-weight: bold;
            color: var(--secondary);
            margin: 10px 0;
        }
        
        .summary-label {
            color: var(--light-text);
            font-size: 0.9rem;
        }
        
        .container {
            display: grid;
            grid-template-columns: 1fr 2fr;
            gap: 20px;
        }
        
        section {
            background: white;
            padding: 20px;
            border-radius: 10px;
            box-shadow: var(--shadow);
            margin-bottom: 20px;
        }
        
        h2 {
            color: var(--primary);
            margin-bottom: 15px;
            padding-bottom: 10px;
            border-bottom: 2px solid var(--light);
            display: flex;
            align-items: center;
        }
        
        h2 i {
            margin-right: 10px;
        }
        
        .todo-list {
            list-style-type: none;
        }
        
        .todo-item {
            display: flex;
            align-items: center;
            padding: 12px 10px;
            border-bottom: 1px solid #eee;
        }
        
        .todo-item:last-child {
            border-bottom: none;
        }
        
        .todo-item input[type="checkbox"] {
            margin-right: 15px;
            transform: scale(1.2);
        }
        
        .todo-text {
            flex-grow: 1;
        }
        
        .todo-item.completed .todo-text {
            text-decoration: line-through;
            color: var(--light-text);
        }
        
        .todo-delete {
            color: var(--accent);
            cursor: pointer;
            padding: 5px;
        }
        
        .todo-form {
            display: flex;
            margin-top: 15px;
        }
        
        .todo-form input {
            flex-grow: 1;
            padding: 12px;
            border: 1px solid #ddd;
            border-radius: 4px 0 0 4px;
            font-size: 1rem;
        }
        
        .todo-form button {
            border-radius: 0 4px 4px 0;
            font-weight: bold;
        }
        
        .project-form input, .project-form textarea, .project-form select {
            width: 100%;
            padding: 12px;
            margin-bottom: 15px;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 1rem;
        }
        
        button {
            background: var(--secondary);
            color: white;
            border: none;
            padding: 12px 18px;
            border-radius: 4px;
            cursor: pointer;
            transition: all 0.3s;
            font-size: 1rem;
        }
        
        button:hover {
            background: #2980b9;
            transform: translateY(-2px);
        }
        
        .delete-btn {
            background: var(--accent);
        }
        
        .delete-btn:hover {
            background: #c0392b;
        }
        
        .project-item {
            border: 1px solid #eee;
            border-radius: 8px;
            padding: 20px;
            margin-bottom: 20px;
            background: #f9f9f9;
            transition: transform 0.3s;
        }
        
        .project-item:hover {
            transform: translateY(-5px);
            box-shadow: 0 6px 12px rgba(0,0,0,0.1);
        }
        
        .project-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
        }
        
        .project-title {
            font-size: 1.4rem;
            font-weight: bold;
            color: var(--primary);
        }
        
        .project-date {
            color: var(--light-text);
            font-size: 0.9rem;
            margin-top: 5px;
        }
        
        .project-description {
            margin-bottom: 15px;
            line-height: 1.6;
        }
        
        .project-status {
            display: inline-block;
            padding: 5px 10px;
            border-radius: 20px;
            font-size: 0.8rem;
            font-weight: bold;
            margin-bottom: 15px;
        }
        
        .status-planning {
            background: #ffeaa7;
            color: #d35400;
        }
        
        .status-progress {
            background: #81ecec;
            color: #00cec9;
        }
        
        .status-completed {
            background: #55efc4;
            color: #00b894;
        }
        
        .task-form {
            display: flex;
            margin-top: 15px;
        }
        
        .task-form input {
            flex-grow: 1;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 4px 0 0 4px;
            font-size: 1rem;
        }
        
        .task-form button {
            border-radius: 0 4px 4px 0;
        }
        
        .task-list {
            margin-top: 15px;
        }
        
        .task-item {
            display: flex;
            align-items: center;
            padding: 10px;
            background: white;
            border: 1px solid #eee;
            border-radius: 4px;
            margin-top: 8px;
        }
        
        .task-item input[type="checkbox"] {
            margin-right: 12px;
            transform: scale(1.2);
        }
        
        .task-text {
            flex-grow: 1;
        }
        
        .task-item.completed .task-text {
            text-decoration: line-through;
            opacity: 0.7;
        }
        
        .task-priority {
            display: inline-block;
            width: 10px;
            height: 10px;
            border-radius: 50%;
            margin-right: 8px;
        }
        
        .priority-high {
            background: var(--accent);
        }
        
        .priority-medium {
            background: var(--warning);
        }
        
        .priority-low {
            background: var(--success);
        }
        
        .comments-section {
            margin-top: 20px;
            border-top: 1px solid #eee;
            padding-top: 15px;
        }
        
        .comment-form {
            display: flex;
            margin-top: 15px;
        }
        
        .comment-form input {
            flex-grow: 1;
            padding: 12px;
            border: 1px solid #ddd;
            border-radius: 4px 0 0 4px;
            font-size: 1rem;
        }
        
        .comment-list {
            margin-top: 15px;
        }
        
        .comment-item {
            background: white;
            padding: 12px;
            border: 1px solid #eee;
            border-radius: 4px;
            margin-top: 12px;
        }
        
        .comment-date {
            font-size: 0.8rem;
            color: var(--light-text);
            margin-top: 5px;
        }
        
        .edit-mode textarea {
            width: 100%;
            min-height: 100px;
            padding: 12px;
            margin-bottom: 12px;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 1rem;
        }
        
        .project-actions {
            display: flex;
            gap: 10px;
        }
        
        .empty-state {
            text-align: center;
            padding: 30px;
            color: var(--light-text);
        }
        
        .empty-state i {
            font-size: 3rem;
            margin-bottom: 15px;
            opacity: 0.5;
        }
        
        .notes-section {
            margin-top: 20px;
        }
        
        .notes-textarea {
            width: 100%;
            min-height: 150px;
            padding: 12px;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 1rem;
            resize: vertical;
        }
        
        .notes-actions {
            display: flex;
            justify-content: flex-end;
            margin-top: 10px;
        }
        
        @media (max-width: 900px) {
            .container {
                grid-template-columns: 1fr;
            }
            
            .dashboard {
                grid-template-columns: 1fr 1fr;
            }
        }
        
        @media (max-width: 600px) {
            .dashboard {
                grid-template-columns: 1fr;
            }
        }
    </style>
</head>
<body>
    <header>
        <h1>Jaye Life Timeline</h1>
        <p class="header-subtitle">Your personal project management system</p>
    </header>
    
    <div class="dashboard">
        <div class="summary-card">
            <div class="summary-label">ACTIVE PROJECTS</div>
            <div class="summary-number" id="projects-count">0</div>
        </div>
        <div class="summary-card">
            <div class="summary-label">TASKS TO COMPLETE</div>
            <div class="summary-number" id="tasks-count">0</div>
        </div>
        <div class="summary-card">
            <div class="summary-label">COMPLETED TASKS</div>
            <div class="summary-number" id="completed-count">0</div>
        </div>
        <div class="summary-card">
            <div class="summary-label">PROGRESS</div>
            <div class="summary-number" id="progress-count">0%</div>
        </div>
    </div>
    
    <div class="container">
        <div class="left-column">
            <section class="todo-section">
                <h2><i class="fas fa-tasks"></i> To-Do List</h2>
                <ul class="todo-list" id="todo-list">
                    <!-- To-do items will appear here -->
                </ul>
                <div class="todo-form">
                    <input type="text" id="todo-input" placeholder="Add a new task...">
                    <button onclick="addTodo()"><i class="fas fa-plus"></i></button>
                </div>
            </section>
            
            <section class="notes-section">
                <h2><i class="fas fa-sticky-note"></i> Quick Notes</h2>
                <textarea class="notes-textarea" id="quick-notes" placeholder="Write your notes here..."></textarea>
                <div class="notes-actions">
                    <button onclick="saveNotes()">Save Notes</button>
                </div>
            </section>
            
            <section class="project-form">
                <h2><i class="fas fa-plus-circle"></i> Add New Project</h2>
                <input type="text" id="project-title" placeholder="Project Title">
                <textarea id="project-description" placeholder="Project Description"></textarea>
                <select id="project-status">
                    <option value="planning">Planning</option>
                    <option value="progress">In Progress</option>
                    <option value="completed">Completed</option>
                </select>
                <button onclick="addProject()" style="width: 100%">Add Project</button>
            </section>
        </div>
        
        <div class="right-column">
            <section id="projects-section">
                <h2><i class="fas fa-project-diagram"></i> Your Projects</h2>
                <div id="projects-list">
                    <!-- Projects will be displayed here -->
                </div>
            </section>
        </div>
    </div>

    <script>
        // Initialize data
        let projects = JSON.parse(localStorage.getItem('projects')) || [];
        let todos = JSON.parse(localStorage.getItem('todos')) || [];
        let notes = localStorage.getItem('quickNotes') || '';
        
        // DOM elements
        const projectsList = document.getElementById('projects-list');
        const todoList = document.getElementById('todo-list');
        const todoInput = document.getElementById('todo-input');
        const projectsCount = document.getElementById('projects-count');
        const tasksCount = document.getElementById('tasks-count');
        const completedCount = document.getElementById('completed-count');
        const progressCount = document.getElementById('progress-count');
        const quickNotes = document.getElementById('quick-notes');
        
        // Set initial notes value
        quickNotes.value = notes;
        
        // Update summary counts
        function updateSummary() {
            projectsCount.textContent = projects.length;
            
            let totalTasks = 0;
            let completedTasks = 0;
            
            // Count project tasks
            projects.forEach(project => {
                if (project.tasks) {
                    totalTasks += project.tasks.length;
                    completedTasks += project.tasks.filter(task => task.completed).length;
                }
            });
            
            // Add todo items to counts
            totalTasks += todos.length;
            completedTasks += todos.filter(todo => todo.completed).length;
            
            tasksCount.textContent = totalTasks - completedTasks;
            completedCount.textContent = completedTasks;
            
            // Calculate progress percentage
            const progress = totalTasks > 0 ? Math.round((completedTasks / totalTasks) * 100) : 0;
            progressCount.textContent = `${progress}%`;
        }
        
        // Render todos
        function renderTodos() {
            todoList.innerHTML = '';
            
            if (todos.length === 0) {
                todoList.innerHTML = '<div class="empty-state"><i class="fas fa-check-circle"></i><p>No tasks yet</p></div>';
                return;
            }
            
            todos.forEach((todo, index) => {
                const todoEl = document.createElement('li');
                todoEl.className = `todo-item ${todo.completed ? 'completed' : ''}`;
                todoEl.innerHTML = `
                    <input type="checkbox" ${todo.completed ? 'checked' : ''} onchange="toggleTodo(${index})">
                    <span class="todo-text">${todo.text}</span>
                    <span class="todo-delete" onclick="deleteTodo(${index})"><i class="fas fa-trash"></i></span>
                `;
                todoList.appendChild(todoEl);
            });
            
            updateSummary();
        }
        
        // Add new todo
        function addTodo() {
            const text = todoInput.value.trim();
            
            if (!text) return;
            
            todos.push({
                text,
                completed: false,
                date: new Date().toISOString()
            });
            
            saveTodos();
            renderTodos();
            todoInput.value = '';
        }
        
        // Toggle todo completion
        function toggleTodo(index) {
            todos[index].completed = !todos[index].completed;
            saveTodos();
            renderTodos();
        }
        
        // Delete todo
        function deleteTodo(index) {
            todos.splice(index, 1);
            saveTodos();
            renderTodos();
        }
        
        // Save todos to localStorage
        function saveTodos() {
            localStorage.setItem('todos', JSON.stringify(todos));
        }
        
        // Save notes
        function saveNotes() {
            notes = quickNotes.value;
            localStorage.setItem('quickNotes', notes);
            alert('Notes saved successfully!');
        }
        
        // Render projects
        function renderProjects() {
            projectsList.innerHTML = '';
            
            if (projects.length === 0) {
                projectsList.innerHTML = '<div class="empty-state"><i class="fas fa-folder-open"></i><p>No projects yet. Add your first project!</p></div>';
                updateSummary();
                return;
            }
            
            projects.forEach((project, index) => {
                const projectEl = document.createElement('div');
                projectEl.className = 'project-item';
                
                // Get status class and text
                let statusClass = '';
                let statusText = '';
                switch(project.status) {
                    case 'planning':
                        statusClass = 'status-planning';
                        statusText = 'Planning';
                        break;
                    case 'progress':
                        statusClass = 'status-progress';
                        statusText = 'In Progress';
                        break;
                    case 'completed':
                        statusClass = 'status-completed';
                        statusText = 'Completed';
                        break;
                }
                
                projectEl.innerHTML = `
                    <div class="project-header">
                        <div>
                            <div class="project-title">${project.title}</div>
                            <div class="project-date">Created: ${new Date(project.date).toLocaleDateString()}</div>
                        </div>
                        <div class="project-actions">
                            <button onclick="toggleEditMode(${index})"><i class="fas fa-edit"></i></button>
                            <button class="delete-btn" onclick="deleteProject(${index})"><i class="fas fa-trash"></i></button>
                        </div>
                    </div>
                    <div class="project-description">${project.description}</div>
                    <span class="project-status ${statusClass}">${statusText}</span>
                    
                    <div class="tasks-section">
                        <h3><i class="fas fa-check-circle"></i> Tasks</h3>
                        <div class="task-list" id="tasks-${index}">
                            ${renderTasks(project.tasks || [])}
                        </div>
                        <div class="task-form">
                            <input type="text" id="task-input-${index}" placeholder="New task">
                            <button onclick="addTask(${index})"><i class="fas fa-plus"></i></button>
                        </div>
                    </div>
                    
                    <div class="comments-section">
                        <h3><i class="fas fa-comments"></i> Comments</h3>
                        <div class="comment-list" id="comments-${index}">
                            ${renderComments(project.comments || [])}
                        </div>
                        <div class="comment-form">
                            <input type="text" id="comment-input-${index}" placeholder="Add a comment">
                            <button onclick="addComment(${index})"><i class="fas fa-paper-plane"></i></button>
                        </div>
                    </div>
                `;
                
                projectsList.appendChild(projectEl);
            });
            
            updateSummary();
        }
        
        function renderTasks(tasks) {
            if (tasks.length === 0) return '<div class="empty-state"><i class="fas fa-clipboard-list"></i><p>No tasks yet</p></div>';
            
            return tasks.map((task, i) => `
                <div class="task-item ${task.completed ? 'completed' : ''}">
                    <input type="checkbox" ${task.completed ? 'checked' : ''} onchange="toggleTask(${i}, this.parentNode.parentNode.parentNode)">
                    <span class="task-priority priority-${task.priority || 'medium'}"></span>
                    <span class="task-text">${task.text}</span>
                </div>
            `).join('');
        }
        
        function renderComments(comments) {
            if (comments.length === 0) return '<div class="empty-state"><i class="fas fa-comment"></i><p>No comments yet</p></div>';
            
            return comments.map(comment => `
                <div class="comment-item">
                    <div>${comment.text}</div>
                    <div class="comment-date">${new Date(comment.date).toLocaleString()}</div>
                </div>
            `).join('');
        }
        
        // Project functions
        function addProject() {
            const title = document.getElementById('project-title').value;
            const description = document.getElementById('project-description').value;
            const status = document.getElementById('project-status').value;
            
            if (!title) {
                alert('Please enter a project title');
                return;
            }
            
            projects.push({
                title,
                description,
                status,
                date: new Date().toISOString(),
                tasks: [],
                comments: []
            });
            
            saveProjects();
            renderProjects();
            
            // Clear form
            document.getElementById('project-title').value = '';
            document.getElementById('project-description').value = '';
        }
        
        function deleteProject(index) {
            if (confirm('Are you sure you want to delete this project?')) {
                projects.splice(index, 1);
                saveProjects();
                renderProjects();
            }
        }
        
        function toggleEditMode(index) {
            const newTitle = prompt('Edit project title:', projects[index].title);
            if (newTitle === null) return;
            
            const newDesc = prompt('Edit project description:', projects[index].description);
            if (newDesc === null) return;
            
            projects[index].title = newTitle;
            projects[index].description = newDesc;
            
            saveProjects();
            renderProjects();
        }
        
        // Task functions
        function addTask(projectIndex) {
            const taskInput = document.getElementById(`task-input-${projectIndex}`);
            const text = taskInput.value;
            
            if (!text) return;
            
            if (!projects[projectIndex].tasks) {
                projects[projectIndex].tasks = [];
            }
            
            projects[projectIndex].tasks.push({
                text,
                completed: false,
                priority: 'medium'
            });
            
            saveProjects();
            renderProjects();
            taskInput.value = '';
        }
        
        function toggleTask(taskIndex, projectElement) {
            // Find the project index from the DOM element
            const projectItems = document.querySelectorAll('.project-item');
            let projectIndex = -1;
            
            for (let i = 0; i < projectItems.length; i++) {
                if (projectItems[i] === projectElement) {
                    projectIndex = i;
                    break;
                }
            }
            
            if (projectIndex !== -1) {
                projects[projectIndex].tasks[taskIndex].completed = 
                    !projects[projectIndex].tasks[taskIndex].completed;
                saveProjects();
                renderProjects();
            }
        }
        
        // Comment functions
        function addComment(projectIndex) {
            const commentInput = document.getElementById(`comment-input-${projectIndex}`);
            const text = commentInput.value;
            
            if (!text) return;
            
            if (!projects[projectIndex].comments) {
                projects[projectIndex].comments = [];
            }
            
            projects[projectIndex].comments.push({
                text,
                date: new Date().toISOString()
            });
            
            saveProjects();
            renderProjects();
            commentInput.value = '';
        }
        
        // Save functions
        function saveProjects() {
            localStorage.setItem('projects', JSON.stringify(projects));
        }
        
        // Initial render
        renderTodos();
        renderProjects();
        
        // Add keyboard support for todo input
        todoInput.addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                addTodo();
            }
        });
        
        // Auto-save notes when typing (optional)
        let notesTimeout;
        quickNotes.addEventListener('input', function() {
            clearTimeout(notesTimeout);
            notesTimeout = setTimeout(saveNotes, 2000);
        });
    </script>
</body>
</html>
